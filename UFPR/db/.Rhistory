set.seed(456)  # Para garantir a reprodutibilidade
n <- 200       # Tamanho da amostra
beta0 <- 5     # Intercepto
beta1 <- 2     # Coeficiente da variável independente
sigma <- 3     # Desvio padrão do erro
# Gerar dados
x <- rnorm(n)
epsilon <- rnorm(n, mean = 0, sd = sigma)
y <- beta0 + beta1 * x + epsilon
# Criar dataframe
df <- data.frame(x = x, y = y)
# Ajustar o modelo de regressão linear
model <- lm(y ~ x, data = df)
# Obter resumo do modelo
summary(model)
# Visualizar o ajuste do modelo
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "blue", alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Regressão Linear: Dados e Linha de Ajuste",
x = "Variável Independente (x)",
y = "Variável Dependente (y)") +
theme_minimal()
# Diagnóstico do modelo
model_diagnostics <- augment(model)
# Plotar resíduos
ggplot(model_diagnostics, aes(x = .fitted, y = .resid)) +
geom_point(color = "darkgreen") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Resíduos do Modelo de Regressão",
x = "Valores Ajustados",
y = "Resíduos") +
theme_minimal()
# Diagnóstico do modelo
model_diagnostics <- augment(model)
# Visualizar o ajuste do modelo
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "blue", alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Regressão Linear: Dados e Linha de Ajuste",
x = "Variável Independente (x)",
y = "Variável Dependente (y)") +
theme_minimal()
# Diagnóstico do modelo
model_diagnostics <- augment(model)
# Plotar resíduos
ggplot(model_diagnostics, aes(x = .fitted, y = .resid)) +
geom_point(color = "darkgreen") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Resíduos do Modelo de Regressão",
x = "Valores Ajustados",
y = "Resíduos") +
theme_minimal()
# Carregar bibliotecas necessárias
library(lme4)   # Para modelos mistos
library(ggplot2) # Para visualização
library(broom.mixed) # Para análise de modelos mistos
library(gridExtra)  # Para arranjar múltiplos gráficos
# Definir parâmetros
set.seed(789)         # Para garantir a reprodutibilidade
n_groups <- 30        # Número de grupos
n_per_group <- 10     # Número de observações por grupo
n <- n_groups * n_per_group # Tamanho total da amostra
# Gerar dados
group <- factor(rep(1:n_groups, each = n_per_group))
x <- rnorm(n)
group_effect <- rnorm(n_groups, sd = 5)  # Efeito aleatório do grupo
y <- 5 + 2 * x + group_effect[as.numeric(group)] + rnorm(n, sd = 3)
# Criar dataframe
df <- data.frame(x = x, y = y, group = group)
# Ajustar o modelo de efeitos mistos
model <- lmer(y ~ x + (1 | group), data = df)
# Resumo do modelo
summary(model)
# Visualizar ajustes
plot1 <- ggplot(df, aes(x = x, y = y)) +
geom_point(aes(color = group), alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "black") +
labs(title = "Dispersão dos Dados com Linha de Regressão",
x = "Variável Independente (x)",
y = "Variável Dependente (y)") +
theme_minimal()
# Diagnóstico dos resíduos
model_diagnostics <- augment(model)
plot2 <- ggplot(model_diagnostics, aes(x = .fitted, y = .resid)) +
geom_point(aes(color = group)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Resíduos do Modelo de Regressão Misto",
x = "Valores Ajustados",
y = "Resíduos") +
theme_minimal()
# Visualizar efeitos aleatórios
plot3 <- ggplot(as.data.frame(ranef(model)$group), aes(x = rownames(.), y = `(Intercept)`)) +
geom_bar(stat = "identity") +
labs(title = "Efeitos Aleatórios do Grupo",
x = "Grupo",
y = "Efeito Aleatório") +
theme_minimal()
# Arranjar múltiplos gráficos
grid.arrange(plot1, plot2, plot3, ncol = 2)
# Definir dados
n_A <- 1000
conversions_A <- 50
n_B <- 1000
conversions_B <- 70
# Taxas de conversão
p_A <- conversions_A / n_A
p_B <- conversions_B / n_B
# Proporção combinada
p <- (conversions_A + conversions_B) / (n_A + n_B)
# Estatística do teste
z <- (p_A - p_B) / sqrt(p * (1 - p) * (1 / n_A + 1 / n_B))
# P-valor
p_value <- 2 * (1 - pnorm(abs(z)))
# Resultados
list(z = z, p_value = p_value)
# Carregar bibliotecas
library(ggplot2)
# Criar dataframe para visualização
df <- data.frame(
Group = factor(c("A", "B"), levels = c("A", "B")),
ConversionRate = c(p_A, p_B)
)
# Plotar taxas de conversão
ggplot(df, aes(x = Group, y = ConversionRate, fill = Group)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Taxas de Conversão para Grupos A e B",
x = "Grupo",
y = "Taxa de Conversão") +
theme_minimal()
pacman::p_load(tidyverse, rdrobust, readr,
sjPlot, broom, estimatr)
base::rm(list = ls())
base::set.seed(123)
pacman::p_load(tidyverse, rdrobust, readr,
sjPlot, broom, estimatr)
mlda_df <- readr::read_csv("https://raw.githubusercontent.com/seramirezruiz/stats-ii-lab/master/Session%206/data/mlda.csv")
View(mlda_df)
mlda_df <- mlda_df |>
select(c(outcome, agecell, treatment, forcing))
View(mlda_df)
sample_n(mlda_df, 5) |> tab_df(title = "Estrutura do banco")
ggplot(mlda_df, aes(x = agecell,
y = treatment,
color = factor(treatment))) +
geom_point(size = 1.5, alpha = 0.5,
position = position_jitter(width = 0, height = 0.25, seed = 1234)) +
labs(x = "Idade",
y = "Probabilidade de ser tratado") +
scale_color_discrete(name = " ",
labels = c("Não possui idade legal para beber", "Possui idade legal para beber")) +
geom_vline(xintercept = 21, linetype = "dotted") +
theme_bw()+
theme(legend.position = "bottom")
ggplot(mlda_df,
aes(x = agecell,
y = outcome)) +
geom_point() +
geom_vline(xintercept = 21, linetype = "dotted") +
labs(title = "Análise exploratória",
x = "Variável forçada (Idade)",
y = "Taxa de mortalidade por acidentes\n de transito (por 100,000)") +
theme_minimal()
base::rm(list = ls())
grDevices::graphics.off()
base::options(scipen = 999)
log(0)
---
title: "UFPR: Análise de Séries Temporais - Lista 01"
tinytex::install_tinytex()
tinytex::install_tinytex()
tinytex::tlmgr_update()
knitr::opts_chunk$set(echo = TRUE)
number_07 = data.frame(t = length(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50))
number_07
number_07 = data.frame(t = c(length(1:15)),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50))
number_07
number_07 = data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50))
number_07
knitr::kable(number_07)
number_07 = data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate(média = mean(z))
pacman::p_load(tidyverse)
number_07 = data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate(média = mean(z))
knitr::kable(number_07)
number_07 = data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate(média = mean(z),
"ω∇Zt" = diff(z))
number_07 = data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate(média = mean(z),
"ω∇Zt" = diff(NA, z))
number_07 = data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate("média" = mean(z),
"ω∇Zt" = diff(z))
number_07 = data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate("média" = mean(z),
"ω∇Zt" = diff(z,1))
number_07 = data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate("média" = mean(z),
"ω∇Zt" = diff(NA, z))
number_07 <- data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate("média" = mean(z),
"ω∇Zt" = c(NA, diff(z)))
number_07
number_07 <- data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate(mean = mean(z),
ω∇Zt = c(NA, diff(z)) * mean)
number_07 <- data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate(mean = mean(z),
"ω∇Zt" = c(NA, diff(z)) * mean)
number_07
number_07 <- data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate(mean = mean(z),
"ω∇Zt" = c(NA, diff(z)) * mean,
"ω∇²Zt" = c(NA, NA, diff(z, differences = 2)) * mean)
# Função para calcular autocorrelação manualmente
auto_corr <- function(x, lag.max) {
n <- length(x)
mean_x <- mean(x)
var_x <- var(x)
acf_values <- numeric(lag.max + 1)
for (lag in 0:lag.max) {
autocov <- sum((x[1:(n - lag)] - mean_x) * (x[(lag + 1):n] - mean_x)) / (n - lag)
acf_values[lag + 1] <- autocov / var_x
}
return(acf_values)
}
number_07 <- data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate(mean = mean(z),
"diff_1" = c(NA, diff(z)),
"diff_2" = c(NA, NA, diff(z, differences = 2))) %>%
mutate(across(everything(), ~ifelse(is.na(.), "-", .)))
acf_values <- auto_corr(number_07$z, lag.max)
# Calcular autocorrelação para lags de 0 a 20
lag.max <- 1
acf_values <- auto_corr(number_07$z, lag.max)
acf_values
# Função para calcular a autocovariância
autocov <- function(x, lag.max) {
n <- length(x)
mean_x <- mean(x)
autocov_values <- numeric(lag.max + 1)  # Vetor para armazenar as autocovariâncias
for (lag in 0:lag.max) {
# Calcular a autocovariância para um dado lag
autocov_values[lag + 1] <- sum((x[1:(n - lag)] - mean_x) * (x[(lag + 1):n] - mean_x)) / (n - lag)
}
return(autocov_values)
}
autocov_values <- autocov(number_07$z, lag.max)
# Calcular a autocovariância para lags de 0 a 10
lag.max <- 1
autocov_values <- autocov(number_07$z, lag.max)
# Mostrar resultados
autocov_values
autocov = (47 - 54.4) * (44 - 54.44)
autocov
autocov = (47 - 54.44) * (44 - 54.44) + (44 - 54.44) * (50 - 54.44) +
(50 - 54.44) * (62 - 54.44) + (62 - 54.44) * (68 - 54.44) +
(68 - 54.44) * (64 - 54.44)
autocov
autocov = (47 - 54.44) * (44 - 54.44) + (44 - 54.44) * (50 - 54.44) +
(50 - 54.44) * (62 - 54.44) + (62 - 54.44) * (68 - 54.44) +
(68 - 54.44) * (64 - 54.44) + (64 - 54.44) * (80 - 54.44) +
(80 - 54.44) * (71 - 54.44) + (71 - 54.44) * (44 - 54.44) +
(44 - 54.44) * (38 - 54.44) + (38 - 54.44) * (23 - 54.44)
autocov
autocov = (47 - 54.44) * (44 - 54.44) + (44 - 54.44) * (50 - 54.44) +
(50 - 54.44) * (62 - 54.44) + (62 - 54.44) * (68 - 54.44) +
(68 - 54.44) * (64 - 54.44) + (64 - 54.44) * (80 - 54.44) +
(80 - 54.44) * (71 - 54.44) + (71 - 54.44) * (44 - 54.44) +
(44 - 54.44) * (38 - 54.44) + (38 - 54.44) * (23 - 54.44) +
(23 - 54.44) * (55 - 54.44) + (55 - 54.44) * (56 - 54.44) +
(56 - 54.44) * (64 - 54.44) + (64 - 54.44) * (50 - 54.44)
autocov
autocov = (47 - 54.44) * (44 - 54.44) + (44 - 54.44) * (50 - 54.44) +
(50 - 54.44) * (62 - 54.44) + (62 - 54.44) * (68 - 54.44) +
(68 - 54.44) * (64 - 54.44) + (64 - 54.44) * (80 - 54.44) +
(80 - 54.44) * (71 - 54.44) + (71 - 54.44) * (44 - 54.44) +
(44 - 54.44) * (38 - 54.44) + (38 - 54.44) * (23 - 54.44) +
(23 - 54.44) * (55 - 54.44) + (55 - 54.44) * (56 - 54.44) +
(56 - 54.44) * (64 - 54.44) + (64 - 54.44) * (50 - 54.44)/15
autocov
autocov = (47 - 54.44) * (44 - 54.44) + (44 - 54.44) * (50 - 54.44) +
(50 - 54.44) * (62 - 54.44) + (62 - 54.44) * (68 - 54.44) +
(68 - 54.44) * (64 - 54.44) + (64 - 54.44) * (80 - 54.44) +
(80 - 54.44) * (71 - 54.44) + (71 - 54.44) * (44 - 54.44) +
(44 - 54.44) * (38 - 54.44) + (38 - 54.44) * (23 - 54.44) +
(23 - 54.44) * (55 - 54.44) + (55 - 54.44) * (56 - 54.44) +
(56 - 54.44) * (64 - 54.44) + (64 - 54.44) * (50 - 54.44)/15
autocov
autocov = (47 - 54.44) * (44 - 54.44) + (44 - 54.44) * (50 - 54.44) +
(50 - 54.44) * (62 - 54.44) + (62 - 54.44) * (68 - 54.44) +
(68 - 54.44) * (64 - 54.44) + (64 - 54.44) * (80 - 54.44) +
(80 - 54.44) * (71 - 54.44) + (71 - 54.44) * (44 - 54.44) +
(44 - 54.44) * (38 - 54.44) + (38 - 54.44) * (23 - 54.44) +
(23 - 54.44) * (55 - 54.44) + (55 - 54.44) * (56 - 54.44) +
(56 - 54.44) * (64 - 54.44) + (64 - 54.44) * (50 - 54.44)
autocov/15
autocov/14
mean_z <- mean(number_07$z)
mean_z
# Calcular autocovariância com defasagem de 1
autocov <- sum((number_07$z[1:(nrow(number_07) - 1)] - mean_z) *
(number_07$z[2:nrow(number_07)] - mean_z)) / (nrow(number_07) - 1)
autocov
knitr::opts_chunk$set(echo = TRUE)
number_09 = data.frame(t = 1:5,
z = c(12,14,16,14,18),
diff = c(NA, diff(z)))
number_09 = data.frame(t = 1:5,
z = c(12,14,16,14,18)) %>%
dplyr::mutate(diff = c(NA, diff(z)))
library(pacman)
pacman::p_load(tidyverse)
number_07 <- data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate(mean = mean(z),
"diff_1" = c(NA, diff(z)),
"diff_2" = c(NA, NA, diff(z, differences = 2))) %>%
mutate(across(everything(), ~ifelse(is.na(.), "-", .)))
knitr::kable(number_07)
number_09 = data.frame(t = 1:5,
z = c(12,14,16,14,18)) %>%
dplyr::mutate(diff = c(NA, diff(z)))
number_09 = data.frame(t = 1:5,
z = c(12,14,16,14,18)) %>%
dplyr::mutate(diff = c(NA, diff(z)))
number_09
cat("A média é Zt é:", mean(number_09$z))
cat("A média de Zt é:", mean(number_09$z))
cat("A Variância de Zt é:", var(number_09$z))
média = (12 + 14 + 16 + 14 + 18)/5
média
print(média)
var = (12 - 14.8)^2 + (14 - 14.8)^2 + (16 - 14.8)^2+ (14 - 14.8)^2 + (18 - 14.8)^2
var
var = ((12 - 14.8)^2 + (14 - 14.8)^2 + (16 - 14.8)^2+ (14 - 14.8)^2 + (18 - 14.8)^2)/5
var
cat("A média de Zt é:", mean(number_09$z))
cat("A Variância de Zt é:", var(number_09$z))
média = (12 + 14 + 16 + 14 + 18)/5
print(média)
var = ((12 - 14.8)^2 + (14 - 14.8)^2 + (16 - 14.8)^2+ (14 - 14.8)^2 + (18 - 14.8)^2)/5-1
var
var = (12 - 14.8)^2 + (14 - 14.8)^2 + (16 - 14.8)^2+ (14 - 14.8)^2 + (18 - 14.8)^2
var/5
var/4
auto = (12 - 14.8) * (14 - 14.8) + (14 - 14.8) * (16 - 14.8)+
(16 - 14.8) * (14 - 14.8) + (14 - 14.8) * (18 - 14.8)
auto/5
X <- c(12, 14, 16, 14, 18)
mean_X <- mean(X)
X_centered <- X - mean_X
auto_cov <- sum(X_centered[1:(length(X)-1)] * X_centered[2:length(X)]) / length(X)
auto_cov
var = (12 - 14.8)^2 + (14 - 14.8)^2 + (16 - 14.8)^2+ (14 - 14.8)^2 + (18 - 14.8)^2
var = var/4
print(var)
auto = (12 - 14.8) * (14 - 14.8) + (14 - 14.8) * (16 - 14.8)+
(16 - 14.8) * (14 - 14.8) + (14 - 14.8) * (18 - 14.8)
auto = auto/5
print(auto)
autocorrelacao = (auto/var)
autocorrelacao
var = (12 - 14.8)^2 + (14 - 14.8)^2 + (16 - 14.8)^2+ (14 - 14.8)^2 + (18 - 14.8)^2
var = var/4
print(var)
cat("A média de Zt é:", mean(number_09$z))
cat("A Variância de Zt é:", var(number_09$z))
var = var/5
print(var)
var = (12 - 14.8)^2 + (14 - 14.8)^2 + (16 - 14.8)^2+ (14 - 14.8)^2 + (18 - 14.8)^2
var = var/5
print(var)
var = (12 - 14.8)^2 + (14 - 14.8)^2 + (16 - 14.8)^2+ (14 - 14.8)^2 + (18 - 14.8)^2
var = var/5
print(var)
auto = (12 - 14.8) * (14 - 14.8) + (14 - 14.8) * (16 - 14.8)+
(16 - 14.8) * (14 - 14.8) + (14 - 14.8) * (18 - 14.8)
auto = auto/5
print(auto)
autocorrelacao = (auto/var)
print(autocorrelacao)
setwd("~/Github/Projetos/Studies/UFPR/db")
setwd("~/Github/Projetos/Studies/UFPR/db")
data_raw = readxl::read_excel("db_exercicio.xlsx")
setwd("~/Github/Projetos/Studies/UFPR/db")
setwd("~/Github/Projetos/Studies/UFPR/db")
data_raw = readxl::read_excel("db_exercicio.xlsx")
data_raw = readxl::read_excel("db_exercicio.xlsx")
View(data_raw)
data_raw %>% glimpse()
data_raw = readxl::read_excel("db_exercicio.xlsx") %>%
janitor::clean_names()
data_trans <- data_raw %>%
dplyr::mutate(diff = c(NA, diff(z)))
View(data_trans)
ggplot2::ggplot(data = data_trans)+
aes(x = t, y = z)+
geom_line()
ggplot2::ggplot(data = data_trans)+
aes(x = t, y = z)+
geom_line()+
theme_minimal()
ggplot2::ggplot(data = data_trans)+
aes(x = t, y = diff)+
geom_line()+
labs(title = "Diferenciada uma vez: Série A do livro B&J")
ggplot2::ggplot(data = data_trans)+
aes(x = t, y = z)+
geom_line()+
labs(title = "Original: Série A do livro B&J")+
theme_bw()
ggplot2::ggplot(data = data_trans)+
aes(x = t, y = diff)+
geom_line()+
labs(title = "Diferenciada uma vez: Série A do livro B&J")+
theme_bw()
data_trans %>%
na.omit() %>%
ggplot2::ggplot()+
aes(x = t, y = diff)+
geom_line()+
labs(title = "Diferenciada uma vez: Série A do livro B&J")+
theme_bw()
acf(data_trans$z)
acf(data_trans$z,
lag.max = 10, main = "Série original")
acf(data_trans$diff,
lag.max = 10, main = "Série Diferenciada uma vez")
data_clean = data_trans %>% na.omit()
View(data_clean)
ggplot2::ggplot(data = data_clean)+
aes(x = t, y = diff)+
geom_line()+
labs(title = "Diferenciada uma vez: Série A do livro B&J")+
theme_bw()
acf(data_clean$diff,
lag.max = 10, main = "Série Diferenciada uma vez")
autocor = (autocov/var(number_07$z))
print(autocor)
acf(autocor, lag.max = 1)
acf(autocor, lag.max = 2)
acf(number_07$z, lag.max = 10)
acf(number_07$z, lag.max = 1)
acf(number_07$z, lag.max = 2)
number_07 <- data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate(mean = mean(z),
"diff_1" = c(NA, diff(z)),
"diff_2" = c(NA, NA, diff(z, differences = 2))) %>%
mutate(across(everything(), ~ifelse(is.na(.), "-", .)))
knitr::kable(number_07)
calc_autocov <- function(data, lag = 1) {
z <- data$z
n <- length(z)
mean_z <- mean(z)
# Subtraindo a média de cada valor
z_centered <- z - mean_z
# Calculando a autocovariância para o lag especificado
autocov <- sum(z_centered[1:(n-lag)] * z_centered[(1+lag):n]) / (n - lag)
return(autocov)
}
# Exemplo de uso com lag 1
autocov_lag_1 <- calc_autocov(number_07, lag = 1)
autocov_lag_1
number_07 <- data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate(mean = mean(z),
"diff_1" = c(NA, diff(z)),
"diff_2" = c(NA, NA, diff(z, differences = 2))) %>%
mutate(across(everything(), ~ifelse(is.na(.), "-", .)))
knitr::kable(number_07)
autocov = (47 - 54.44) * (44 - 54.44) + (44 - 54.44) * (50 - 54.44) +
(50 - 54.44) * (62 - 54.44) + (62 - 54.44) * (68 - 54.44) +
(68 - 54.44) * (64 - 54.44) + (64 - 54.44) * (80 - 54.44) +
(80 - 54.44) * (71 - 54.44) + (71 - 54.44) * (44 - 54.44) +
(44 - 54.44) * (38 - 54.44) + (38 - 54.44) * (23 - 54.44) +
(23 - 54.44) * (55 - 54.44) + (55 - 54.44) * (56 - 54.44) +
(56 - 54.44) * (64 - 54.44) + (64 - 54.44) * (50 - 54.44)
autocov = autocov/15
print(autocov)
autocov = autocov/14
print(autocov)
autocov = (47 - 54.44) * (44 - 54.44) + (44 - 54.44) * (50 - 54.44) +
(50 - 54.44) * (62 - 54.44) + (62 - 54.44) * (68 - 54.44) +
(68 - 54.44) * (64 - 54.44) + (64 - 54.44) * (80 - 54.44) +
(80 - 54.44) * (71 - 54.44) + (71 - 54.44) * (44 - 54.44) +
(44 - 54.44) * (38 - 54.44) + (38 - 54.44) * (23 - 54.44) +
(23 - 54.44) * (55 - 54.44) + (55 - 54.44) * (56 - 54.44) +
(56 - 54.44) * (64 - 54.44) + (64 - 54.44) * (50 - 54.44)
autocov = autocov/14
print(autocov)
autocor = (autocov/var(number_07$z))
print(autocor)
acf(number_07$z, lag.max = 2, main = "Autocorrelação com k = 1")
